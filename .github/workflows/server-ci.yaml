name: Server CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      # Check out repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Set up python
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      # Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd server
          poetry install --no-interaction --no-root

      # Install your root project, if required
      - name: Install project
        run: |
          cd server
          poetry install --no-interaction

      # Run format and lint suite
      - name: Lint Backend Code
        run: |
          cd server
          source .venv/bin/activate
          ruff check .

  check-type:
    runs-on: ubuntu-latest
    steps:
      # Check out repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Set up python
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd server
          poetry install --no-interaction --no-root

      # Run type checking suite
      - name: Check types
        run: |
          cd server
          source .venv/bin/activate
          mypy .

  tests:
    runs-on: ubuntu-latest
    steps:
      # Check out repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Set up python
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      # Load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd server
          poetry install --no-interaction --no-root

      - name: Deploy mongo
        run: docker-compose up mongo -d

      - name: Wait for app startup
        run: sleep 20

      # Run test suite
      - name: Run tests
        run: |
          cd server
          source .venv/bin/activate
          pytest tests/