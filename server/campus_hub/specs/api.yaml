openapi: 3.0.0
info:
  title: CampusHub
  description: "API documentation for CampusHub"
  version: 0.0.0

servers:
  - url: /campus_hub/v1

tags:
  - name: Authentication
    description: Operations related to user authentication (Register, Login, Forgot Password)
  - name: Services
    description: Operations related to services (Get, Add, Update, Delete)
  - name: Orders
    description: Operations related to orders (Get History, Place Order, Cancel Order)
  - name: Payments
    description: Operations related to payments (Initiate Payment, Verify Payment)
  - name: Notifications
    description: Operations related to notifications (Get, Get by ID)

paths:
  /services:
    get:
      summary: Get a list of all services.
      operationId: services.get_services
      tags:
        - Services
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
        '404':
          description: Not Found
    post:
      summary: Add a new service 
      operationId: services.add_service
      tags:
        - Services
      requestBody:
        description: Service object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        '405':
          description: Invalid Input.
        '201':
          description: Success
          content:                                       #if we want to get the posted object in response.
            application/json:
              schema:
                $ref: "#/components/schemas/Service"  
          
  /services/{service_id}: 
  
    put:
      summary: Update a service
      operationId: services.update_service
      tags:
        - Services
      parameters:
        - name: service_id
          in: path
          description: ID of store to put
          required: true
          schema: 
            type: string 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        '404':
          description: Not Found
    
    delete:
      summary: Delete an service
      operationId: services.delete_service
      tags:
        - Services
      parameters:
        - name: service_id
          in: path
          description: ID of store to delete
          required: true
          schema: 
            type: string 
      responses:
        '204':
          description: Success
        '404':
          description: Not Found

  /stores:
    get:
      summary: Get a list of all stores.
      operationId: stores.get_stores
      tags:
        - Stores
      parameters:
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/product_category'
        - $ref: '#/components/parameters/max_distance'
        - $ref: '#/components/parameters/max_rating'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreList'
        '404':
          description: Not Found
    post:
      summary: Add a new store 
      operationId: stores.add_store
      tags:
        - Stores
      requestBody:
        description: Store object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Store"
      responses:
        '405':
          description: Invalid Input.
        '201':
          description: Success
          content:                                       #if we want to get the posted object in response.
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
    
          
  /stores/{store_id}: 
    get:
      summary: Get a specific store.
      operationId: stores.get_store_by_id
      tags:
        - Stores
      parameters:
        - name: store_id
          in: path
          description: ID of store to get
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '404':
          description: Not Found
    put:
      summary: Update a store
      operationId: stores.update_store
      tags:
        - Stores
      parameters:
        - name: store_id
          in: path
          description: ID of store to put
          required: true
          schema: 
            type: string 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Store"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        '404':
          description: Not Found
    
    delete:
      summary: Delete an store
      operationId: stores.delete_store
      tags:
        - Stores
      parameters:
        - name: store_id
          in: path
          description: ID of store to delete
          required: true
          schema: 
            type: string   
      responses:
        '204':
          description: Success
        '404':
          description: Not Found

  /products:
    get:
      summary: Get a list of all products.
      operationId: products.get_products
      tags:
        - Stores
      parameters:
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/store_id'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '404':
          description: Not Found

  /products/{product_id}: 
    get:
      summary: Get a specific product.
      operationId: products.get_product_by_id
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          description: ID of product to get
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
    put:
      summary: Update a product
      operationId: products.update_product
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          description: ID of product to put
          required: true
          schema: 
            type: string 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: Not Found
    
    delete:
      summary: Delete a product 
      operationId: products.delete_product
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          description: ID of product to delete
          required: true
          schema: 
            type: string   
      responses:
        '204':
          description: Success
        '404':
          description: Not Found
  
components:
  schemas:
    ServiceList:
      type: array
      items:
        $ref: '#/components/schemas/Service'
  
    Service:
      type: object
      properties:
        service_id:
          type: string
        store_ids:
          type: array
          items:
            type: string
        service_name:
          type: string
        service_description:
          type: string
          nullable: true
        service_images:
          type: array
          items:
            type: string
        service_categories:
          type: array            
          items:
            type: string
            
    StoreList:
      type: array
      items:
        $ref: '#/components/schemas/Store'

    Store:
      type: object
      properties:
        store_id:
          type: string 
        store_name:
          type: string
        store_images:
          type: array
          items:
            type: string
        store_description:
          type: string
          nullable: true
        store_categories:
          type: array
          items:
            type: string
        store_phone_number:
          type: string #passed as string  , no phoneNumber type in yaml
        store_email:   
          type: string
          format: email
        customer_order_ids:
          type: array
          items:
            type: string
        product_ids:
          type: array
          items:
            type: string
        seller_id:
          type: string
        service_id:
          type: string
        coordinates:
          type: array     #passed as array, no tuple in yaml
          items:
            type: number
            format: float
          minItems: 2
          maxItems: 2
        store_address:
          type: string
        stripe_public_key:
          type: string
        timings:
          type: array     #passed as array, no tuple in yaml
          items:
            type: number
            format: float
          minItems: 2
          maxItems: 2
          nullable: true
        overall_rating:
          type: number
          format: float
          nullable: true
    Product:
      type: object
      properties:
        product_id:
          type: string
        product_categories:
          type: array
          items:
            type: string
        product_name:
          type: string
        store_id:
          type: string
        service_id:
          type: string
        product_image:
          type: array
          items:
            type: string
        product_cost:
          type: number
          format: float
        product_description:
          type: string
          nullable: true
        stocks:
          type: integer
        product_specifications:
          type: object
          additionalProperties:
            type: string
    ProductList: 
      type: array
      items:
        $ref: '#/components/schemas/Product'

  parameters:
    service_id:
      name: service_id
      in: query
      description: service_id of the entity
      required: false
      schema:
        type: string
        
    store_id:
      name: store_id
      in: query
      description: store_id of the entity
      required: false
      schema:
        type: string
  
    product_category:
      name: product_category
      in: query
      description: required product_category
      required: false
      schema:
        type: string
    
    max_distance:
      name: max_distance 
      in: query
      description: max distance of store
      required: false
      schema:
        type: number
        format: float
    
    max_rating:
      name: max_rating 
      in: query
      description: max rating of the store
      required: false
      schema:
        type: number
        format: float
          
  
          
